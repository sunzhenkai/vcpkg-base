diff --git a/CMakeLists.txt b/CMakeLists.txt
index 22c4d1c..7dffe08 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -799,7 +799,14 @@ endif()
 set_target_properties(tcmalloc_minimal PROPERTIES
         VERSION ${TCMALLOC_SO_VERSION}
         SOVERSION ${TCMALLOC_SO_VERSION})
-install(TARGETS tcmalloc_minimal)
+install(TARGETS tcmalloc_minimal tcmalloc_minimal_internal spinlock sysinfo logging EXPORT tcmalloc_minimal
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+INSTALL(EXPORT tcmalloc_minimal
+        DESTINATION share/tcmalloc_minimal
+        FILE tcmalloc_minimalConfig.cmake
+        NAMESPACE tcmalloc_minimal::)
 if(GPERFTOOLS_BUILD_STATIC)
     add_library(tcmalloc_minimal_static STATIC ${libtcmalloc_minimal_internal_la_SOURCES})
     target_compile_definitions(tcmalloc_minimal_static PRIVATE NO_TCMALLOC_SAMPLES NDEBUG)
@@ -811,7 +818,14 @@ if(GPERFTOOLS_BUILD_STATIC)
       set_target_properties(tcmalloc_minimal_static PROPERTIES
               OUTPUT_NAME tcmalloc_minimal)
     endif()
-    install(TARGETS tcmalloc_minimal_static)
+    install(TARGETS tcmalloc_minimal_static tcmalloc_minimal_internal spinlock sysinfo logging EXPORT tcmalloc_minimal_static 
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+    INSTALL(EXPORT tcmalloc_minimal_static
+        DESTINATION share/tcmalloc_minimal_static
+        FILE tcmalloc_minimal_staticConfig.cmake
+        NAMESPACE tcmalloc_minimal::)
 endif()
 
 if(BUILD_TESTING)
@@ -980,63 +994,6 @@ endif()
 
 ### ------- tcmalloc_minimal_debug (thread-caching malloc with debugallocation)
 
-if(GPERFTOOLS_BUILD_DEBUGALLOC)
-  set(libtcmalloc_minimal_debug_la_SOURCES src/debugallocation.cc
-          ${TCMALLOC_MINIMAL_INCLUDES})
-  add_library(tcmalloc_minimal_debug SHARED ${libtcmalloc_minimal_debug_la_SOURCES})
-  target_compile_definitions(tcmalloc_minimal_debug PRIVATE ${libtcmalloc_minimal_la_DEFINES}
-          TCMALLOC_FOR_DEBUGALLOCATION)
-  target_link_libraries(tcmalloc_minimal_debug PRIVATE ${libtcmalloc_minimal_la_LIBADD})
-  target_link_libraries(tcmalloc_minimal_debug PRIVATE Threads::Threads)
-  install(TARGETS tcmalloc_minimal_debug)
-  set_target_properties(tcmalloc_minimal_debug PROPERTIES
-          VERSION ${TCMALLOC_SO_VERSION}
-          SOVERSION ${TCMALLOC_SO_VERSION})
-  if(GPERFTOOLS_BUILD_STATIC)
-    add_library(tcmalloc_minimal_debug_static STATIC ${libtcmalloc_minimal_debug_la_SOURCES})
-    target_compile_definitions(tcmalloc_minimal_debug_static PRIVATE ${libtcmalloc_minimal_la_DEFINES}
-            TCMALLOC_FOR_DEBUGALLOCATION)
-    if(NOT MSVC)
-      set_target_properties(tcmalloc_minimal_debug_static PROPERTIES
-              OUTPUT_NAME tcmalloc_minimal_debug)
-    endif()
-    target_link_libraries(tcmalloc_minimal_debug_static PRIVATE ${libtcmalloc_minimal_la_LIBADD})
-    install(TARGETS tcmalloc_minimal_debug_static)
-  endif()
-
-  ### Unittests
-
-  if(BUILD_TESTING)
-    add_executable(tcmalloc_minimal_debug_unittest ${tcmalloc_minimal_unittest_SOURCES})
-    target_compile_definitions(tcmalloc_minimal_debug_unittest PRIVATE DEBUGALLOCATION)
-    target_link_libraries(tcmalloc_minimal_debug_unittest tcmalloc_minimal_debug ${tcmalloc_minimal_unittest_LDADD})
-    add_test(tcmalloc_minimal_debug_unittest tcmalloc_minimal_debug_unittest)
-
-    add_executable(malloc_extension_debug_test ${malloc_extension_test_SOURCES})
-    target_link_libraries(malloc_extension_debug_test tcmalloc_minimal_debug ${malloc_extension_test_LIBADD})
-    add_test(malloc_extension_debug_test malloc_extension_debug_test)
-
-    if(NOT MINGW AND NOT APPLE)
-      add_executable(memalign_debug_unittest ${memalign_unittest_SOURCES})
-      target_link_libraries(memalign_debug_unittest
-              tcmalloc_minimal_debug Threads::Threads)
-      add_test(memalign_debug_unittest memalign_debug_unittest)
-    endif()
-
-    add_executable(realloc_debug_unittest ${realloc_unittest_SOURCES})
-    target_link_libraries(realloc_debug_unittest PUBLIC tcmalloc_minimal_debug)
-    add_test(realloc_debug_unittest realloc_debug_unittest)
-
-    if(WITH_STACK_TRACE)
-      add_executable(debugallocation_test src/tests/debugallocation_test.cc)
-      target_link_libraries(debugallocation_test PUBLIC tcmalloc_minimal_debug Threads::Threads)
-
-      add_test(NAME debugallocation_test
-              COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/src/tests/debugallocation_test.sh)
-    endif()
-  endif()
-endif()
-
 if(NOT MINGW AND NOT MSVC)
   if(gperftools_build_benchmark)
     add_library(run_benchmark benchmark/run_benchmark.cc)
@@ -1144,7 +1101,15 @@ if(GPERFTOOLS_BUILD_HEAP_CHECKER OR GPERFTOOLS_BUILD_HEAP_PROFILER)
   set_target_properties(tcmalloc PROPERTIES
           VERSION ${TCMALLOC_SO_VERSION}
           SOVERSION ${TCMALLOC_SO_VERSION})
-  install(TARGETS tcmalloc)
+  # export(TARGETS tcmalloc_internal)
+  install(TARGETS tcmalloc tcmalloc_internal stacktrace spinlock sysinfo logging EXPORT tcmalloc 
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+  INSTALL(EXPORT tcmalloc
+    DESTINATION share/tcmalloc
+    FILE tcmallocConfig.cmake
+    NAMESPACE tcmalloc::)
   if(GPERFTOOLS_BUILD_STATIC)
     add_library(tcmalloc_static STATIC ${libtcmalloc_la_SOURCES})
     target_compile_definitions(tcmalloc_static PRIVATE ${libtcmalloc_la_DEFINE})
@@ -1152,7 +1117,14 @@ if(GPERFTOOLS_BUILD_HEAP_CHECKER OR GPERFTOOLS_BUILD_HEAP_PROFILER)
       set_target_properties(tcmalloc_static PROPERTIES OUTPUT_NAME tcmalloc)
     endif()
     target_link_libraries(tcmalloc_static PRIVATE ${libtcmalloc_la_LIBADD})
-    install(TARGETS tcmalloc_static)
+    install(TARGETS tcmalloc_static tcmalloc_internal stacktrace spinlock sysinfo logging EXPORT tcmalloc_static 
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+    INSTALL(EXPORT tcmalloc_static
+      DESTINATION share/tcmalloc_static
+      FILE tcmalloc_staticConfig.cmake
+      NAMESPACE tcmalloc::)
   endif()
 
   ### Unittests
@@ -1259,58 +1231,6 @@ endif()
 
 endif()
 
-### ------- tcmalloc with debugallocation
-if(GPERFTOOLS_BUILD_DEBUGALLOC)
-  if(GPERFTOOLS_BUILD_HEAP_CHECKER OR GPERFTOOLS_BUILD_HEAP_PROFILER)
-    add_library(tcmalloc_debug SHARED src/debugallocation.cc ${HEAP_CHECKER_SOURCES} ${TCMALLOC_INCLUDES})
-    target_compile_definitions(tcmalloc_debug PRIVATE ${libtcmalloc_la_DEFINE}
-            TCMALLOC_FOR_DEBUGALLOCATION)
-    target_link_libraries(tcmalloc_debug PRIVATE ${libtcmalloc_la_LIBADD})
-    set_target_properties(tcmalloc_debug PROPERTIES
-            VERSION ${TCMALLOC_SO_VERSION}
-            SOVERSION ${TCMALLOC_SO_VERSION})
-    install(TARGETS tcmalloc_debug)
-    if(GPERFTOOLS_BUILD_STATIC)
-      add_library(tcmalloc_debug_static STATIC src/debugallocation.cc ${HEAP_CHECKER_SOURCES} ${TCMALLOC_INCLUDES})
-      target_compile_definitions(tcmalloc_debug_static PRIVATE ${libtcmalloc_la_DEFINE}
-              TCMALLOC_FOR_DEBUGALLOCATION)
-      target_link_libraries(tcmalloc_debug_static PRIVATE ${libtcmalloc_la_LIBADD})
-      if(NOT MSVC)
-        set_target_properties(tcmalloc_debug_static PROPERTIES
-                OUTPUT_NAME tcmalloc_debug)
-      endif()
-      install(TARGETS tcmalloc_debug_static)
-    endif()
-
-    ### Unittests
-    if(BUILD_TESTING)
-      add_executable(tcmalloc_debug_unittest ${tcmalloc_unittest_SOURCES})
-      target_compile_definitions(tcmalloc_debug_unittest PRIVATE DEBUGALLOCATION ${tcmalloc_unittest})
-      target_link_libraries(tcmalloc_debug_unittest tcmalloc_debug ${tcmalloc_unittest_LIBADD})
-      add_test(tcmalloc_debug_unittest tcmalloc_debug_unittest)
-
-      add_executable(sampler_debug_test ${sampler_test_SOURCES})
-      target_link_libraries(sampler_debug_test tcmalloc_debug ${tcmalloc_unittest_LIBADD})
-      add_test(sampler_debug_test sampler_debug_test)
-
-      add_executable(sampling_debug_test ${sampling_test_SOURCES})
-      target_link_libraries(sampling_debug_test ${TCMALLOC_FLAGS} tcmalloc_debug Threads::Threads)
-      add_test(sampling_debug_test.sh "${CMAKE_CURRENT_SOURCE_DIR}/src/tests/sampling_test.sh" sampling_debug_test)
-
-      if(GPERFTOOLS_BUILD_HEAP_PROFILER)
-        add_executable(heap_profiler_debug_unittest ${heap_profiler_unittest_SOURCES})
-        target_link_libraries(heap_profiler_debug_unittest ${TCMALLOC_FLAGS} tcmalloc_debug Threads::Threads)
-        add_test(heap-profiler_debug_unittest.sh "${CMAKE_CURRENT_SOURCE_DIR}/src/tests/heap-profiler_unittest.sh" heap-profiler_debug_unittest)
-      endif()
-      if(GPERFTOOLS_BUILD_HEAP_CHECKER)
-        add_executable(heap_checker_debug_unittest ${heap_checker_unittest_SOURCES})
-        target_link_libraries(heap_checker_debug_unittest ${TCMALLOC_FLAGS} tcmalloc_debug logging Threads::Threads)
-        add_test(heap_checker_debug_unittest heap_checker_debug_unittest)
-      endif()
-    endif()
-  endif()
-endif()
-
 ### ------- CPU profiler
 if(GPERFTOOLS_BUILD_CPU_PROFILER)
   ### The header files we use.  We divide into categories based on directory
@@ -1342,14 +1262,29 @@ if(GPERFTOOLS_BUILD_CPU_PROFILER)
   set_target_properties(profiler PROPERTIES
           VERSION ${PROFILER_SO_VERSION}
           SOVERSION ${PROFILER_SO_VERSION})
-  install(TARGETS profiler)
+  # export(TARGETS stacktrace fake_stacktrace_scope)
+  install(TARGETS profiler stacktrace fake_stacktrace_scope spinlock sysinfo logging EXPORT profiler 
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+  INSTALL(EXPORT profiler
+    DESTINATION share/profiler
+    FILE profilerConfig.cmake
+    NAMESPACE profiler::)
   if(GPERFTOOLS_BUILD_STATIC)
     add_library(profiler_static STATIC ${libprofiler_la_SOURCES})
     target_link_libraries(profiler_static PRIVATE ${libprofiler_la_LIBADD})
     if(NOT MSVC)
       set_target_properties(profiler_static PROPERTIES OUTPUT_NAME profiler)
     endif()
-    install(TARGETS profiler_static)
+    install(TARGETS profiler_static stacktrace fake_stacktrace_scope spinlock sysinfo logging EXPORT profiler_static 
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+    INSTALL(EXPORT profiler_static
+      DESTINATION share/profiler_static
+      FILE profiler_staticConfig.cmake
+      NAMESPACE profiler::)
   endif()
 
   # See discussion above (under LIBTCMALLOC_MINIMAL) for why we do this.
@@ -1417,7 +1352,14 @@ if(GPERFTOOLS_BUILD_HEAP_PROFILER OR GPERFTOOLS_BUILD_HEAP_CHECKER)
       # libstacktrace.la, which we already get via libtcmalloc.  Trying to
       # specify it twice causes link-time duplicate-definition errors. :-(
       target_link_libraries(tcmalloc_and_profiler PRIVATE ${libtcmalloc_la_LIBADD})
-      install(TARGETS tcmalloc_and_profiler)
+      install(TARGETS tcmalloc_and_profiler tcmalloc_internal stacktrace spinlock sysinfo logging EXPORT tcmalloc_and_profiler 
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+      INSTALL(EXPORT tcmalloc_and_profiler
+        DESTINATION share/tcmalloc_and_profiler
+        FILE tcmalloc_and_profilerConfig.cmake
+        NAMESPACE tcmalloc_and_profiler::)
       if(GPERFTOOLS_BUILD_STATIC)
         add_library(tcmalloc_and_profiler_static STATIC ${libtcmalloc_la_SOURCES} ${libprofiler_la_SOURCES})
         target_compile_definitions(tcmalloc_and_profiler_static PRIVATE ${libtcmalloc_la_DEFINE})
@@ -1426,7 +1368,14 @@ if(GPERFTOOLS_BUILD_HEAP_PROFILER OR GPERFTOOLS_BUILD_HEAP_CHECKER)
           set_target_properties(tcmalloc_and_profiler_static PROPERTIES
                   OUTPUT_NAME tcmalloc_and_profiler)
         endif()
-        install(TARGETS tcmalloc_and_profiler_static)
+        install(TARGETS tcmalloc_and_profiler_static tcmalloc_internal stacktrace spinlock sysinfo logging EXPORT tcmalloc_and_profiler_static 
+          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+        INSTALL(EXPORT tcmalloc_and_profiler_static
+          DESTINATION share/tcmalloc_and_profiler_static
+          FILE tcmalloc_and_profiler_staticConfig.cmake
+          NAMESPACE tcmalloc_and_profiler::)
       endif()
 
       if(BUILD_TESTING)
