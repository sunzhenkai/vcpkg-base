diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5b330d443c..b93943ed87 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -228,7 +228,7 @@ add_custom_target(plugins
   grpc_objective_c_plugin
   grpc_php_plugin
   grpc_python_plugin
-  grpc_ruby_plugin
+  #grpc_ruby_plugin
 )
 
 add_custom_target(tools_c
@@ -5110,7 +5110,7 @@ add_library(grpc_plugin_support
   src/compiler/objective_c_generator.cc
   src/compiler/php_generator.cc
   src/compiler/python_generator.cc
-  src/compiler/ruby_generator.cc
+  #src/compiler/ruby_generator.cc
 )
 
 if(WIN32 AND MSVC)
@@ -14134,41 +14134,41 @@ endif()
 endif (gRPC_BUILD_CODEGEN)
 if (gRPC_BUILD_CODEGEN)
 
-add_executable(grpc_ruby_plugin
-  src/compiler/ruby_plugin.cc
-)
-
-
-target_include_directories(grpc_ruby_plugin
-  PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}
-  PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include
-  PRIVATE ${_gRPC_SSL_INCLUDE_DIR}
-  PRIVATE ${_gRPC_PROTOBUF_INCLUDE_DIR}
-  PRIVATE ${_gRPC_ZLIB_INCLUDE_DIR}
-  PRIVATE ${_gRPC_BENCHMARK_INCLUDE_DIR}
-  PRIVATE ${_gRPC_CARES_INCLUDE_DIR}
-  PRIVATE ${_gRPC_GFLAGS_INCLUDE_DIR}
-  PRIVATE ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
-  PRIVATE ${_gRPC_NANOPB_INCLUDE_DIR}
-  PRIVATE ${_gRPC_PROTO_GENS_DIR}
-)
-
-target_link_libraries(grpc_ruby_plugin
-  ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
-  ${_gRPC_PROTOBUF_LIBRARIES}
-  ${_gRPC_ALLTARGETS_LIBRARIES}
-  grpc_plugin_support
-)
-
-
-
-if (gRPC_INSTALL)
-  install(TARGETS grpc_ruby_plugin EXPORT gRPCTargets
-    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
-    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
-    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
-  )
-endif()
+# add_executable(grpc_ruby_plugin
+# src/compiler/ruby_plugin.cc
+# )
+
+
+  #target_include_directories(grpc_ruby_plugin
+  #PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}
+  #PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include
+  #PRIVATE ${_gRPC_SSL_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_PROTOBUF_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_ZLIB_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_BENCHMARK_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_CARES_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_GFLAGS_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_NANOPB_INCLUDE_DIR}
+  #PRIVATE ${_gRPC_PROTO_GENS_DIR}
+#)
+
+#target_link_libraries(grpc_ruby_plugin
+#  ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
+#  ${_gRPC_PROTOBUF_LIBRARIES}
+#  ${_gRPC_ALLTARGETS_LIBRARIES}
+#  grpc_plugin_support
+#)
+
+
+
+#if (gRPC_INSTALL)
+#  install(TARGETS grpc_ruby_plugin EXPORT gRPCTargets
+#    RUNTIME DESTINATION ${gRPC_INSTALL_BINDIR}
+#    LIBRARY DESTINATION ${gRPC_INSTALL_LIBDIR}
+#    ARCHIVE DESTINATION ${gRPC_INSTALL_LIBDIR}
+#  )
+#endif()
 
 endif (gRPC_BUILD_CODEGEN)
 if (gRPC_BUILD_TESTS)
diff --git a/src/core/lib/gpr/log_linux.cc b/src/core/lib/gpr/log_linux.cc
index 561276f0c2..0a8522ec62 100644
--- a/src/core/lib/gpr/log_linux.cc
+++ b/src/core/lib/gpr/log_linux.cc
@@ -40,7 +40,7 @@
 #include <time.h>
 #include <unistd.h>
 
-static long gettid(void) { return syscall(__NR_gettid); }
+static long grpc_gettid(void) { return syscall(__NR_gettid); }
 
 void gpr_log(const char* file, int line, gpr_log_severity severity,
              const char* format, ...) {
@@ -70,7 +70,7 @@ void gpr_default_log(gpr_log_func_args* args) {
   gpr_timespec now = gpr_now(GPR_CLOCK_REALTIME);
   struct tm tm;
   static __thread long tid = 0;
-  if (tid == 0) tid = gettid();
+  if (tid == 0) tid = grpc_gettid();
 
   timer = static_cast<time_t>(now.tv_sec);
   final_slash = strrchr(args->file, '/');
diff --git a/src/core/lib/gpr/log_posix.cc b/src/core/lib/gpr/log_posix.cc
index b6edc14ab6..1702056289 100644
--- a/src/core/lib/gpr/log_posix.cc
+++ b/src/core/lib/gpr/log_posix.cc
@@ -31,7 +31,7 @@
 #include <string.h>
 #include <time.h>
 
-static intptr_t gettid(void) { return (intptr_t)pthread_self(); }
+static intptr_t grpc_gettid(void) { return (intptr_t)pthread_self(); }
 
 void gpr_log(const char* file, int line, gpr_log_severity severity,
              const char* format, ...) {
@@ -86,7 +86,7 @@ void gpr_default_log(gpr_log_func_args* args) {
   char* prefix;
   gpr_asprintf(&prefix, "%s%s.%09d %7" PRIdPTR " %s:%d]",
                gpr_log_severity_string(args->severity), time_buffer,
-               (int)(now.tv_nsec), gettid(), display_file, args->line);
+               (int)(now.tv_nsec), grpc_gettid(), display_file, args->line);
 
   fprintf(stderr, "%-70s %s\n", prefix, args->message);
   gpr_free(prefix);
diff --git a/src/core/lib/iomgr/ev_epollex_linux.cc b/src/core/lib/iomgr/ev_epollex_linux.cc
index 08116b3ab5..a9ec077ce6 100644
--- a/src/core/lib/iomgr/ev_epollex_linux.cc
+++ b/src/core/lib/iomgr/ev_epollex_linux.cc
@@ -1102,7 +1102,7 @@ static void end_worker(grpc_pollset* pollset, grpc_pollset_worker* worker,
 }
 
 #ifndef NDEBUG
-static long gettid(void) { return syscall(__NR_gettid); }
+static long grpc_gettid(void) { return syscall(__NR_gettid); }
 #endif
 
 /* pollset->mu lock must be held by the caller before calling this.
@@ -1122,7 +1122,7 @@ static grpc_error* pollset_work(grpc_pollset* pollset,
 #define WORKER_PTR (&worker)
 #endif
 #ifndef NDEBUG
-  WORKER_PTR->originator = gettid();
+  WORKER_PTR->originator = grpc_gettid();
 #endif
   if (GRPC_TRACE_FLAG_ENABLED(grpc_polling_trace)) {
     gpr_log(GPR_INFO,
diff --git a/src/cpp/server/channelz/channelz_service.cc b/src/cpp/server/channelz/channelz_service.cc
index 0409991fe6..5591647be2 100644
--- a/src/cpp/server/channelz/channelz_service.cc
+++ b/src/cpp/server/channelz/channelz_service.cc
@@ -27,7 +27,7 @@ namespace grpc {
 grpc::protobuf::util::Status ParseJson(const char* json_str,
                                        grpc::protobuf::Message* message) {
   grpc::protobuf::json::JsonParseOptions options;
-  options.case_insensitive_enum_parsing = true;
+  //options.case_insensitive_enum_parsing = true;
   return grpc::protobuf::json::JsonStringToMessage(json_str, message, options);
 }
 
